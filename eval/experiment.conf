NAME=three-tier

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=3-tier-scen.xml

# optional core automator recording, will be played in a loop
#AUTOMATOR=three_nodes.pos

proxynodes=(alicenode bobnode claranode)

GUI=1

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnd"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="1"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

# commands to daemonize at beginning of simulation, e.g., dtnd
# START_DAEMONIZED=('dtnd --cla mtcp --nodeid $(hostname)')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="nntp_sender.py dtnd messagedeliveryreport messagedeliveryreport_dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=30

#COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    # copy over the node configs for moNNT.py
    cexec alicenode "cp /shared/confs/aliceconfig.toml /app/moNNT.py/backend/config.toml 2>&1"
    cexec bobnode   "cp /shared/confs/bobconfig.toml   /app/moNNT.py/backend/config.toml 2>&1"
    cexec claranode "cp /shared/confs/claraconfig.toml /app/moNNT.py/backend/config.toml 2>&1"

    # start dtnd
    for node in "${proxynodes[@]}"; do
        echo "Starting DNTd on node $node"
        fn="nohup.dtnd.$(basename $(mktemp -u -t 'XXXX')).log"
        cexec $node "nohup dtnd --cla mtcp --nodeid $node > $fn 2>&1 & sleep 0.1"
    done    

    # start moNNT.py
    for node in "${proxynodes[@]}"; do
        echo "Starting moNNT.py on node $node"
        fn="nohup.monntpy.$(basename $(mktemp -u -t 'XXXX')).log"
        cexec $node "nohup start-monntpy.sh > $fn 2>&1 & sleep 0.1"
    done 

    # nohup $(echo $@) > $fn 2>&1 & sleep 0.1
    
    # cexec n4 "nohup mqtt_sender.py temp $SENDER_INTERVAL > nohup.mqtt_sender.log 2>&1 & sleep 0.1"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
}

# Called after logs have been collected from all nodes
analyze() {
    echo "analyze hook - results in $1"
#     messagestatsreport $1 > $1/messagestatsreport.txt
    
    # collect number of sent messages and received messages
#     SENT=$(cat $1/n*/nohup.mqtt_sender.log | grep '\->' | wc -l)
#     RECEIVED=$(cat $1/receiver/nohup.mosquitto_sub.log | wc -l)
    
#     RATE=$(echo "scale=2; $RECEIVED / $SENT" | bc)
#     echo "EXPERIMENT RESULT: tx: $SENT, rx: $RECEIVED | rate: $RATE"
}