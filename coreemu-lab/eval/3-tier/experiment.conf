NAME=three-tier

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=3-tier-scen.xml

# optional core automator recording, will be played in a loop
#AUTOMATOR=three_nodes.pos

ALICE_EMAIL='alice@tu-darmstadt.de'
BOB_EMAIL='bob@gmail.com'
CLARA_EMAIL='clara@posteo.de'

SENDER_INTERVAL=1

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
# this is a bit shaky, but to monitor moNNT.py, which runs in its own environment,
# we have to monitor the process that ends in "python"
MONITOR_PIDSTAT_PARAMS="python$"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="1"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

# commands to daemonize at beginning of simulation, e.g., dtnd
# START_DAEMONIZED=('dtnd --cla mtcp --nodeid $(hostname)')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="nntp_sender.py start-monntpy.sh dtnd messagedeliveryreport messagedeliveryreport_dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=500

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=30

#COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"

    # configuration file is the same for all nodes. Customization happens through environment variables
    # in the call to start-monntpy.sh in start()
    cp /app/modified/config.py /app/moNNT.py/backend/dtn7sqlite/config.py
    # Copy fresh DBs into all nodes
    for d in /tmp/pycore.*/*node; do
        cp /app/modified/db.sqlite3 "$d.conf/";
    done;
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    nohup messagedeliveryreport 10 node.conf node.conf > $1/messagedeliveryreport.log &
    nohup messagedeliveryreport_dtnd 1 > $1/messagedeliveryreport_dtnd.log &

    # start dtnd
    cexec alicenode "nohup dtnd --cla mtcp --nodeid alicenode > nohup.dtnd.log 2>&1 & sleep 0.1"
    cexec bobnode   "nohup dtnd --cla mtcp --nodeid bobnode   > nohup.dtnd.log 2>&1 & sleep 0.1"
    cexec claranode "nohup dtnd --cla mtcp --nodeid claranode > nohup.dtnd.log 2>&1 & sleep 0.1"

    cexec alicenode "export SENDER_EMAIL=$ALICE_EMAIL && nohup start-monntpy.sh > nohup.monntpy.log 2>&1 & sleep 0.2"
    cexec bobnode   "export SENDER_EMAIL=$BOB_EMAIL   && nohup start-monntpy.sh > nohup.monntpy.log 2>&1 & sleep 0.2"
    cexec claranode "export SENDER_EMAIL=$CLARA_EMAIL && nohup start-monntpy.sh > nohup.monntpy.log 2>&1 & sleep 0.2"

    cexec alicephone "nohup nntp_sender.py 10.0.0.10 $ALICE_EMAIL $SENDER_INTERVAL > nohup.nntp_sender.log 2>&1 & sleep 0.1"
    cexec bobphone   "nohup nntp_sender.py 10.0.0.11 $BOB_EMAIL   $SENDER_INTERVAL > nohup.nntp_sender.log 2>&1 & sleep 0.1"
    cexec claraphone "nohup nntp_sender.py 10.0.0.12 $CLARA_EMAIL $SENDER_INTERVAL > nohup.nntp_sender.log 2>&1 & sleep 0.1"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
}

# Called after logs have been collected from all nodes
analyze() {
    echo "analyze hook - results in $1"
    messagestatsreport $1 > $1/messagestatsreport.txt
    
    # collect number of sent messages and received messages
    SENT=$(cat $1/*phone/nohup.nntp_sender.log | grep 'Sending article' | wc -l)
    RECEIVED=$(cat $1/*node/nohup.monntpy.log | grep 'Creating article entry' | wc -l)
    
    RATE=$(echo "scale=2; $RECEIVED / $SENT" | bc)
    echo "EXPERIMENT RESULT: tx: $SENT, rx: $RECEIVED | rate: $RATE"
}