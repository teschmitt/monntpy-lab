NAME=always_on_nozip

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=always_on.xml

# optional core automator recording, will be played in a loop
# AUTOMATOR=always_on.pos


N1_EMAIL='n1@monttpy.tu-darmstadt.de'
N2_EMAIL='n2@monttpy.tu-darmstadt.de'
N3_EMAIL='n3@monttpy.tu-darmstadt.de'
SENDER_INTERVAL=0.3
NUM_ARTICLES=100

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
# this is a bit shaky, but to monitor moNNT.py, which runs in its own environment,
# we have to monitor the process that ends in "python"
MONITOR_PIDSTAT_PARAMS="python$"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
# MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
# MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
# START_EXEC=("echo THIS IS IMPORTANT $(hostname)")

# commands to daemonize at beginning of simulation, e.g., dtnd
# START_DAEMONIZED=('dtnd --cla mtcp --nodeid $(hostname)')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="dtnd python"

# let simulation warm up for a period of time if needed
WARMUP=0

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=40

# COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"

    echo "Checking out 'no zip' revision"
    cur=$(pwd)
    cd /app/moNNT.py
    git checkout 878a354
    cd "$pwd"

    cp /app/assets/config.py /app/moNNT.py/backend/dtn7sqlite/config.py

    cexec n2 "nohup dtnd --cla mtcp --nodeid n2 > nohup.dtnd_n2.log 2>&1 & sleep 0.1"
    cexec n1 "nohup dtnd --cla mtcp --nodeid n1 > nohup.dtnd_n1.log 2>&1 & sleep 0.1"

    cexec n1 "export SENDER_EMAIL=$N1_EMAIL && nohup start-monntpy.sh > nohup.monntpy_n1.log 2>&1 & sleep 1"
    cexec n2 "export SENDER_EMAIL=$N2_EMAIL && nohup start-monntpy.sh > nohup.monntpy_n2.log 2>&1 & sleep 1"

}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    echo "start hook - results in $1"

    sleep 3
    echo "Starting to send articles on node 1 and 2"
    cexec n1 "nohup nntp_sender.py 127.0.0.1 $N1_EMAIL $SENDER_INTERVAL $NUM_ARTICLES > nntp_sender_n1.log 2>&1 & sleep 0.1"
    cexec n2 "nohup nntp_sender.py 127.0.0.1 $N2_EMAIL $SENDER_INTERVAL $NUM_ARTICLES > nntp_sender_n2.log 2>&1 & sleep 0.1"

}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
}

# Called after logs have been collected from all nodes
analyze() {
    echo "post hook - results in $1"

}